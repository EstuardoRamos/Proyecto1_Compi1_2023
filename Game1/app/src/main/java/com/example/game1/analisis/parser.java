
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615
//----------------------------------------------------

package com.example.game1.analisis;

import com.example.game1.errores.TablaDeErrores;
import com.example.game1.game.Casilla;
import com.example.game1.game.Posicion;
import com.example.game1.game.World;
import com.example.game1.parse.Token;
import java.util.ArrayList;
import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\050\000\002\002\004\000\002\010\006\000\002\010" +
    "\004\000\002\023\005\000\002\025\004\000\002\025\003" +
    "\000\002\024\005\000\002\026\006\000\002\027\006\000" +
    "\002\030\006\000\002\031\005\000\002\017\004\000\002" +
    "\017\003\000\002\017\003\000\002\011\005\000\002\011" +
    "\005\000\002\011\005\000\002\011\003\000\002\011\003" +
    "\000\002\011\003\000\002\011\003\000\002\011\005\000" +
    "\002\013\005\000\002\015\003\000\002\015\004\000\002" +
    "\014\005\000\002\014\005\000\002\014\005\000\002\014" +
    "\005\000\002\014\005\000\002\014\005\000\002\014\005" +
    "\000\002\040\006\000\002\037\005\000\002\041\005\000" +
    "\002\032\010\000\002\032\010\000\002\034\005\000\002" +
    "\035\003\000\002\035\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\147\000\004\005\005\001\002\000\004\002\151\001" +
    "\002\000\006\076\010\100\007\001\002\000\004\002\uffff" +
    "\001\002\000\004\102\125\001\002\000\024\003\021\007" +
    "\027\011\024\013\020\015\025\035\013\045\026\047\022" +
    "\051\011\001\002\000\006\037\033\041\032\001\002\000" +
    "\026\003\ufff0\007\ufff0\011\ufff0\013\ufff0\015\ufff0\035\ufff0" +
    "\045\ufff0\047\ufff0\051\ufff0\077\ufff0\001\002\000\006\037" +
    "\033\041\032\001\002\000\004\077\110\001\002\000\026" +
    "\003\uffee\007\uffee\011\uffee\013\uffee\015\uffee\035\uffee\045" +
    "\uffee\047\uffee\051\uffee\077\uffee\001\002\000\026\003\uffef" +
    "\007\uffef\011\uffef\013\uffef\015\uffef\035\uffef\045\uffef\047" +
    "\uffef\051\uffef\077\uffef\001\002\000\026\003\uffed\007\uffed" +
    "\011\uffed\013\uffed\015\uffed\035\uffed\045\uffed\047\uffed\051" +
    "\uffed\077\uffed\001\002\000\004\004\106\001\002\000\004" +
    "\077\ufff4\001\002\000\006\037\033\041\032\001\002\000" +
    "\026\003\021\007\027\011\024\013\020\015\025\035\013" +
    "\045\026\047\022\051\011\077\ufff5\001\002\000\004\004" +
    "\101\001\002\000\020\017\052\021\050\023\051\025\060" +
    "\027\054\031\057\033\053\001\002\000\006\037\033\041" +
    "\032\001\002\000\004\063\030\001\002\000\004\010\031" +
    "\001\002\000\026\003\ufff3\007\ufff3\011\ufff3\013\ufff3\015" +
    "\ufff3\035\ufff3\045\ufff3\047\ufff3\051\ufff3\077\ufff3\001\002" +
    "\000\004\004\043\001\002\000\004\004\036\001\002\000" +
    "\004\046\035\001\002\000\026\003\uffdf\007\uffdf\011\uffdf" +
    "\013\uffdf\015\uffdf\035\uffdf\045\uffdf\047\uffdf\051\uffdf\077" +
    "\uffdf\001\002\000\004\040\037\001\002\000\004\041\040" +
    "\001\002\000\004\004\041\001\002\000\004\042\042\001" +
    "\002\000\012\043\uffde\046\uffde\050\uffde\052\uffde\001\002" +
    "\000\004\042\044\001\002\000\004\037\045\001\002\000" +
    "\004\004\046\001\002\000\004\040\047\001\002\000\012" +
    "\043\uffdd\046\uffdd\050\uffdd\052\uffdd\001\002\000\004\065" +
    "\077\001\002\000\004\065\075\001\002\000\004\065\073" +
    "\001\002\000\004\065\071\001\002\000\004\065\067\001" +
    "\002\000\004\016\066\001\002\000\022\016\uffea\017\052" +
    "\021\050\023\051\025\060\027\054\031\057\033\053\001" +
    "\002\000\004\065\063\001\002\000\004\065\061\001\002" +
    "\000\004\026\062\001\002\000\022\016\uffe5\017\uffe5\021" +
    "\uffe5\023\uffe5\025\uffe5\027\uffe5\031\uffe5\033\uffe5\001\002" +
    "\000\004\032\064\001\002\000\022\016\uffe3\017\uffe3\021" +
    "\uffe3\023\uffe3\025\uffe3\027\uffe3\031\uffe3\033\uffe3\001\002" +
    "\000\004\016\uffe9\001\002\000\026\003\uffeb\007\uffeb\011" +
    "\uffeb\013\uffeb\015\uffeb\035\uffeb\045\uffeb\047\uffeb\051\uffeb" +
    "\077\uffeb\001\002\000\004\030\070\001\002\000\022\016" +
    "\uffe4\017\uffe4\021\uffe4\023\uffe4\025\uffe4\027\uffe4\031\uffe4" +
    "\033\uffe4\001\002\000\004\034\072\001\002\000\022\016" +
    "\uffe2\017\uffe2\021\uffe2\023\uffe2\025\uffe2\027\uffe2\031\uffe2" +
    "\033\uffe2\001\002\000\004\020\074\001\002\000\022\016" +
    "\uffe8\017\uffe8\021\uffe8\023\uffe8\025\uffe8\027\uffe8\031\uffe8" +
    "\033\uffe8\001\002\000\004\024\076\001\002\000\022\016" +
    "\uffe6\017\uffe6\021\uffe6\023\uffe6\025\uffe6\027\uffe6\031\uffe6" +
    "\033\uffe6\001\002\000\004\022\100\001\002\000\022\016" +
    "\uffe7\017\uffe7\021\uffe7\023\uffe7\025\uffe7\027\uffe7\031\uffe7" +
    "\033\uffe7\001\002\000\004\012\102\001\002\000\026\003" +
    "\ufff2\007\ufff2\011\ufff2\013\ufff2\015\ufff2\035\ufff2\045\ufff2" +
    "\047\ufff2\051\ufff2\077\ufff2\001\002\000\004\077\ufff6\001" +
    "\002\000\004\050\105\001\002\000\026\003\uffec\007\uffec" +
    "\011\uffec\013\uffec\015\uffec\035\uffec\045\uffec\047\uffec\051" +
    "\uffec\077\uffec\001\002\000\004\014\107\001\002\000\026" +
    "\003\ufff1\007\ufff1\011\ufff1\013\ufff1\015\ufff1\035\ufff1\045" +
    "\ufff1\047\ufff1\051\ufff1\077\ufff1\001\002\000\004\002\000" +
    "\001\002\000\004\043\113\001\002\000\004\036\120\001" +
    "\002\000\006\066\114\067\115\001\002\000\004\044\uffdb" +
    "\001\002\000\004\044\uffda\001\002\000\004\044\117\001" +
    "\002\000\004\036\uffdc\001\002\000\026\003\uffe1\007\uffe1" +
    "\011\uffe1\013\uffe1\015\uffe1\035\uffe1\045\uffe1\047\uffe1\051" +
    "\uffe1\077\uffe1\001\002\000\004\052\122\001\002\000\026" +
    "\003\uffe0\007\uffe0\011\uffe0\013\uffe0\015\uffe0\035\uffe0\045" +
    "\uffe0\047\uffe0\051\uffe0\077\uffe0\001\002\000\006\101\147" +
    "\102\125\001\002\000\006\101\ufffc\102\ufffc\001\002\000" +
    "\004\103\126\001\002\000\004\006\131\001\002\000\004" +
    "\111\130\001\002\000\006\101\ufffb\102\ufffb\001\002\000" +
    "\004\104\132\001\002\000\004\043\134\001\002\000\004" +
    "\111\ufffa\001\002\000\004\004\135\001\002\000\004\044" +
    "\136\001\002\000\004\105\140\001\002\000\004\111\ufff9" +
    "\001\002\000\004\004\141\001\002\000\004\106\142\001" +
    "\002\000\004\107\143\001\002\000\004\004\145\001\002" +
    "\000\004\111\ufff8\001\002\000\004\110\146\001\002\000" +
    "\004\111\ufff7\001\002\000\004\002\ufffe\001\002\000\006" +
    "\101\ufffd\102\ufffd\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\147\000\004\010\003\001\001\000\002\001\001\000" +
    "\004\023\005\001\001\000\002\001\001\000\006\024\123" +
    "\025\122\001\001\000\016\011\022\013\011\017\013\037" +
    "\014\040\015\041\016\001\001\000\004\032\120\001\001" +
    "\000\002\001\001\000\004\032\110\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\032\103\001" +
    "\001\000\016\011\022\013\011\017\102\037\014\040\015" +
    "\041\016\001\001\000\002\001\001\000\006\014\055\015" +
    "\054\001\001\000\004\032\033\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\014" +
    "\055\015\064\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\034\111\001\001\000\002" +
    "\001\001\000\004\035\115\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\024" +
    "\147\001\001\000\002\001\001\000\004\026\126\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\027\132\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\030\136\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\031\143\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public parser(CounterLexer lexer) {
        super(lexer);
    }
    private String xml;
    private String xmlAux;

    private World world;
    private ArrayList<Casilla> boards=new ArrayList<Casilla>();;
    private ArrayList<Casilla> boxes = new ArrayList<Casilla>();
    private ArrayList<Casilla> targets=new ArrayList<Casilla>();
    private ArrayList<Casilla> players;
    private String nameWorld;
    private Casilla player;
    private int filas;
    private int columnas;
    private ArrayList<String> errores = new ArrayList<>();
    private ArrayList<Token> TokensErrores = new ArrayList<>();

    private TablaDeErrores tabla = new TablaDeErrores();


        public ArrayList<String> getErrores() {
        return errores;
    }
   /* public void syntax_error(Symbol s) {
            tabla.agregarError(String.valueOf(s.value), s.left, s.right, "Sintactico", "Error de Sintaxis, se esperaba otro token");
        }*/

        public void syntax_error (Symbol s) {
        Token tokenError = (Token) s.value; 
        System.out.println("Error token Lexema: " + String.valueOf(s.value.toString()) + " | Linea: " + s.left + " | columna: " + s.right);
        System.out.println("Error token Lexema: " + tokenError.getValue() + " | Linea: " + tokenError.getLine() + " | columna: " + tokenError.getColumn());
        errores.add("Error Sintactico: Lexema: " + tokenError.getValue() + " | Linea: " + tokenError.getLine() + " | columna: " + tokenError.getColumn());
        TokensErrores.add(tokenError);
    }

  


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= s EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		World start_val = (World)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // s ::= HEAD WORLD atributes WORLD_C 
            {
              World RESULT =null;
		
                                                    for(Casilla board:boxes){board.infoCasilla();}
                                                    world = new World(nameWorld, filas, columnas, null, boards, boxes, targets, player);
                                                    world.escribirJuego();
                                                    if(world!=null){
                                                        RESULT=world;
                                                    }
                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // s ::= HEAD prod_errores 
            {
              World RESULT =null;
		System.out.println("se estan recibiendo errores");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // prod_errores ::= ERRORS list_error ERRORS_C 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("prod_errores",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // list_error ::= list_error tok_error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_error",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // list_error ::= tok_error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_error",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // tok_error ::= ERROR_X val ERROR_X_C 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tok_error",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // val ::= VALUE CADENA VALUE_C typeI 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("val",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // typeI ::= TYPE INTEGER TYPE_C line 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("typeI",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // line ::= LINE INTEGER LINE_C col 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("line",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // col ::= COLUMN INTEGER COLUMN_C 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("col",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // atributes ::= s2 atributes 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("atributes",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // atributes ::= s2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("atributes",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // atributes ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("atributes",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // s2 ::= NAME STRING NAME_C 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token s = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		nameWorld=s.getValue();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s2",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // s2 ::= ROWS INTEGER ROWS_C 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token n = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		filas=Integer.valueOf(n.getValue());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s2",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // s2 ::= COLS INTEGER COLS_C 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token n = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		columnas=Integer.valueOf(n.getValue());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s2",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // s2 ::= config 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s2",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // s2 ::= board 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Casilla c = (Casilla)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		boards.add(c);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s2",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // s2 ::= box 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Casilla c = (Casilla)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		boxes.add(c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s2",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // s2 ::= target 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Casilla c = (Casilla)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		targets.add(c);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s2",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // s2 ::= PLAYER pos PLAYER_C 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Posicion p = (Posicion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		player = new Casilla(p.getPosX(), p.getPosY(), "player","n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s2",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // config ::= CONFIG s4 CONFIG_C 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("config",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // s4 ::= s3 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s4",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // s4 ::= s3 s4 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s4",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // s3 ::= BOX_COLOR HEXADECIMAL BOX_COLOR_C 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s3",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // s3 ::= BOX_ON_TARGET_COLOR HEXADECIMAL BOX_ON_TARGET_COLOR_C 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s3",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // s3 ::= TARGET_COLOR HEXADECIMAL TARGET_COLOR_C 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s3",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // s3 ::= BRICK_COLOR HEXADECIMAL BRICK_COLOR_C 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s3",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // s3 ::= HALL_COLOR HEXADECIMAL HALL_COLOR_C 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s3",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // s3 ::= UNDEFINED_COLOR HEXADECIMAL UNDEFINED_COLOR_C 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s3",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // s3 ::= PLAYER_COLOR HEXADECIMAL PLAYER_COLOR_C 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s3",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // board ::= BOARD pos type BOARD_C 
            {
              Casilla RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Posicion p = (Posicion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=new Casilla(p.getPosX(), p.getPosY(), t, "n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("board",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // box ::= BOXES pos BOXES_C 
            {
              Casilla RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Posicion p = (Posicion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=new Casilla(p.getPosX(), p.getPosY(), "boxes", "n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("box",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // target ::= TARGETS pos TARGETS_C 
            {
              Casilla RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Posicion p = (Posicion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=new Casilla(p.getPosX(), p.getPosY(), "targets", "n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("target",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // pos ::= POSX INTEGER POSX_C POSY INTEGER POSY_C 
            {
              Posicion RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Token x = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token y = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT= new Posicion(Integer.valueOf(x.getValue()),Integer.valueOf(y.getValue()));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pos",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // pos ::= POSY INTEGER POSY_C POSX INTEGER POSX_C 
            {
              Posicion RESULT =null;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Token y = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token x = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT= new Posicion(Integer.valueOf(y.getValue()),Integer.valueOf(x.getValue()));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pos",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // type ::= TYPE opc_bh TYPE_C 
            {
              String RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=o;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // opc_bh ::= BRICK 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token b = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=b.getValue();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opc_bh",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // opc_bh ::= HALL 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token b = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=b.getValue();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opc_bh",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
