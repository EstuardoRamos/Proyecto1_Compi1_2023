
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615
//----------------------------------------------------

package com.mycompany.server_sokoban.parser;

import com.mycompany.server_sokoban.errores.TablaDeErrores;
import com.mycompany.server_sokoban.juego.*;
import java.util.ArrayList;
import java_cup.runtime.*;
import java_cup.runtime.XMLElement;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\070\000\002\002\004\000\002\010\005\000\002\010" +
    "\004\000\002\011\005\000\002\011\003\000\002\011\004" +
    "\000\002\015\005\000\002\015\005\000\002\015\005\000" +
    "\002\015\005\000\002\015\007\000\002\015\007\000\002" +
    "\015\007\000\002\015\004\000\002\015\004\000\002\013" +
    "\005\000\002\012\007\000\002\012\005\000\002\014\002" +
    "\000\002\014\003\000\002\014\003\000\002\014\003\000" +
    "\002\014\003\000\002\014\003\000\002\014\003\000\002" +
    "\014\003\000\002\020\007\000\002\020\005\000\002\020" +
    "\004\000\002\024\005\000\002\024\005\000\002\024\004" +
    "\000\002\024\004\000\002\022\005\000\002\023\003\000" +
    "\002\023\003\000\002\021\003\000\002\021\003\000\002" +
    "\017\007\000\002\017\005\000\002\016\011\000\002\016" +
    "\011\000\002\007\005\000\002\007\003\000\002\002\005" +
    "\000\002\002\005\000\002\002\003\000\002\003\005\000" +
    "\002\003\005\000\002\003\003\000\002\004\004\000\002" +
    "\004\003\000\002\005\003\000\002\005\005\000\002\005" +
    "\006\000\002\005\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\206\000\006\003\005\040\004\001\002\000\024\003" +
    "\015\014\024\015\021\016\014\017\020\027\012\033\022" +
    "\034\016\035\011\001\002\000\004\041\010\001\002\000" +
    "\004\002\007\001\002\000\004\002\001\001\002\000\004" +
    "\002\uffff\001\002\000\004\037\uffdd\001\002\000\004\037" +
    "\156\001\002\000\010\003\ufffd\036\ufffd\041\ufffd\001\002" +
    "\000\004\037\154\001\002\000\006\041\152\043\153\001" +
    "\002\000\004\037\146\001\002\000\010\003\144\036\142" +
    "\041\143\001\002\000\004\037\117\001\002\000\004\037" +
    "\115\001\002\000\004\037\uffdc\001\002\000\004\037\027" +
    "\001\002\000\004\037\025\001\002\000\004\045\026\001" +
    "\002\000\010\003\ufffb\036\ufffb\041\ufffb\001\002\000\004" +
    "\042\030\001\002\000\004\040\032\001\002\000\006\036" +
    "\110\043\111\001\002\000\006\030\034\031\033\001\002" +
    "\000\004\037\102\001\002\000\004\037\037\001\002\000" +
    "\004\041\036\001\002\000\006\036\uffda\043\uffda\001\002" +
    "\000\014\010\043\012\040\013\045\052\042\053\046\001" +
    "\002\000\024\003\uffcd\004\uffcd\005\uffcd\006\uffcd\007\uffcd" +
    "\011\uffcd\013\uffcd\036\uffcd\041\uffcd\001\002\000\010\003" +
    "\uffd6\036\uffd6\041\uffd6\001\002\000\004\010\077\001\002" +
    "\000\014\005\052\010\043\012\040\052\042\053\046\001" +
    "\002\000\004\036\071\001\002\000\014\005\052\010\043" +
    "\012\040\052\042\053\046\001\002\000\004\010\047\001" +
    "\002\000\004\055\050\001\002\000\004\011\051\001\002" +
    "\000\024\003\uffca\004\uffca\005\uffca\006\uffca\007\uffca\011" +
    "\uffca\013\uffca\036\uffca\041\uffca\001\002\000\012\010\043" +
    "\012\040\052\042\053\046\001\002\000\016\004\uffce\005" +
    "\uffce\006\uffce\007\uffce\011\uffce\013\uffce\001\002\000\016" +
    "\004\uffd0\005\uffd0\006\uffd0\007\uffd0\011\uffd0\013\uffd0\001" +
    "\002\000\016\004\uffd3\005\uffd3\006\064\007\063\011\uffd3" +
    "\013\uffd3\001\002\000\010\004\057\005\060\013\061\001" +
    "\002\000\014\005\052\010\043\012\040\052\042\053\046" +
    "\001\002\000\014\005\052\010\043\012\040\052\042\053" +
    "\046\001\002\000\010\003\uffd7\036\uffd7\041\uffd7\001\002" +
    "\000\016\004\uffd4\005\uffd4\006\064\007\063\011\uffd4\013" +
    "\uffd4\001\002\000\014\005\052\010\043\012\040\052\042" +
    "\053\046\001\002\000\014\005\052\010\043\012\040\052" +
    "\042\053\046\001\002\000\016\004\uffd2\005\uffd2\006\uffd2" +
    "\007\uffd2\011\uffd2\013\uffd2\001\002\000\016\004\uffd1\005" +
    "\uffd1\006\uffd1\007\uffd1\011\uffd1\013\uffd1\001\002\000\016" +
    "\004\uffd5\005\uffd5\006\064\007\063\011\uffd5\013\uffd5\001" +
    "\002\000\016\004\uffcf\005\uffcf\006\uffcf\007\uffcf\011\uffcf" +
    "\013\uffcf\001\002\000\004\031\072\001\002\000\004\037" +
    "\073\001\002\000\014\010\043\012\040\013\045\052\042" +
    "\053\046\001\002\000\006\036\uffd9\041\uffd9\001\002\000" +
    "\010\004\057\005\060\011\076\001\002\000\024\003\uffcc" +
    "\004\uffcc\005\uffcc\006\uffcc\007\uffcc\011\uffcc\013\uffcc\036" +
    "\uffcc\041\uffcc\001\002\000\004\055\100\001\002\000\004" +
    "\011\101\001\002\000\024\003\uffcb\004\uffcb\005\uffcb\006" +
    "\uffcb\007\uffcb\011\uffcb\013\uffcb\036\uffcb\041\uffcb\001\002" +
    "\000\014\010\043\012\040\013\045\052\042\053\046\001" +
    "\002\000\004\036\104\001\002\000\004\030\105\001\002" +
    "\000\004\037\106\001\002\000\014\010\043\012\040\013" +
    "\045\052\042\053\046\001\002\000\006\036\uffd8\041\uffd8" +
    "\001\002\000\004\040\112\001\002\000\010\003\ufff6\036" +
    "\ufff6\041\ufff6\001\002\000\006\030\034\031\033\001\002" +
    "\000\004\041\114\001\002\000\006\036\uffdb\043\uffdb\001" +
    "\002\000\014\010\043\012\040\013\045\052\042\053\046" +
    "\001\002\000\010\003\ufffa\036\ufffa\041\ufffa\001\002\000" +
    "\004\040\121\001\002\000\010\003\ufff8\036\ufff8\041\ufff8" +
    "\001\002\000\022\020\125\021\122\022\123\023\131\024" +
    "\127\025\130\026\126\037\uffef\001\002\000\004\037\uffed" +
    "\001\002\000\004\037\uffec\001\002\000\006\036\136\041" +
    "\135\001\002\000\004\037\uffee\001\002\000\004\037\uffe8" +
    "\001\002\000\004\037\uffea\001\002\000\004\037\uffe9\001" +
    "\002\000\004\037\uffeb\001\002\000\004\037\133\001\002" +
    "\000\004\046\134\001\002\000\006\036\ufff0\041\ufff0\001" +
    "\002\000\010\003\ufff2\036\ufff2\041\ufff2\001\002\000\022" +
    "\020\125\021\122\022\123\023\131\024\127\025\130\026" +
    "\126\037\uffef\001\002\000\004\037\140\001\002\000\004" +
    "\046\141\001\002\000\006\036\ufff1\041\ufff1\001\002\000" +
    "\024\003\015\014\024\015\021\016\014\017\020\027\012" +
    "\033\022\034\016\035\011\001\002\000\004\002\000\001" +
    "\002\000\010\003\ufffc\036\ufffc\041\ufffc\001\002\000\010" +
    "\003\ufffe\036\ufffe\041\ufffe\001\002\000\004\040\147\001" +
    "\002\000\006\030\034\031\033\001\002\000\004\041\151" +
    "\001\002\000\010\003\ufff5\036\ufff5\041\ufff5\001\002\000" +
    "\010\003\ufff3\036\ufff3\041\ufff3\001\002\000\010\003\ufff4" +
    "\036\ufff4\041\ufff4\001\002\000\014\010\043\012\040\013" +
    "\045\052\042\053\046\001\002\000\010\003\ufff9\036\ufff9" +
    "\041\ufff9\001\002\000\004\042\157\001\002\000\006\003" +
    "\160\040\161\001\002\000\004\041\210\001\002\000\012" +
    "\003\166\030\034\031\033\032\172\001\002\000\006\036" +
    "\163\043\164\001\002\000\004\040\165\001\002\000\010" +
    "\003\ufff7\036\ufff7\041\ufff7\001\002\000\012\003\166\030" +
    "\034\031\033\032\172\001\002\000\010\030\034\031\033" +
    "\032\172\001\002\000\004\041\203\001\002\000\004\036" +
    "\201\001\002\000\004\036\177\001\002\000\004\037\173" +
    "\001\002\000\006\047\175\050\176\001\002\000\006\036" +
    "\uffe0\041\uffe0\001\002\000\006\036\uffdf\041\uffdf\001\002" +
    "\000\006\036\uffde\041\uffde\001\002\000\006\030\034\031" +
    "\033\001\002\000\004\041\uffe3\001\002\000\004\032\172" +
    "\001\002\000\004\041\uffe4\001\002\000\006\036\uffe7\043" +
    "\uffe7\001\002\000\004\041\uffe1\001\002\000\004\041\uffe2" +
    "\001\002\000\004\041\207\001\002\000\006\036\uffe6\043" +
    "\uffe6\001\002\000\006\036\uffe5\043\uffe5\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\206\000\004\010\005\001\001\000\010\011\016\015" +
    "\012\021\022\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\017\030\001\001\000\002\001\001" +
    "\000\004\016\034\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\005\040" +
    "\007\043\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\002\074\003\054\004\053\005\052" +
    "\001\001\000\002\001\001\000\012\002\055\003\054\004" +
    "\053\005\052\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\005\067\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\003\066\004\053\005\052\001" +
    "\001\000\010\003\061\004\053\005\052\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\004\065\005\052\001" +
    "\001\000\006\004\064\005\052\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\005\040\007\073" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\005\040\007\102\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\005\040\007\106" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\016\112\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\005\040\007\115\001\001\000\002\001" +
    "\001\000\004\013\117\001\001\000\002\001\001\000\006" +
    "\012\123\014\131\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\014\136\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\015\144\021\022" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\016\147\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\005\040\007\154\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\020\161\001\001\000\002\001" +
    "\001\000\010\016\167\022\170\024\205\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\016" +
    "\167\022\170\024\166\001\001\000\006\016\203\022\204" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\023\173\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\016" +
    "\177\001\001\000\002\001\001\000\004\022\201\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public parser(CounterLexer lexer) {
        super(lexer);
    }
    private String xml;
    private String xmlAux;

    private World world;
    private ArrayList<Casilla> boards;
    private ArrayList<Casilla> boxes = new ArrayList<Casilla>();
    private ArrayList<Casilla> targets=new ArrayList<Casilla>();
    private ArrayList<Casilla> players;
    private String nameWorld;
    private Casilla player;
    private int filas;
    private int columnas;
    private ArrayList<String> errores = new ArrayList<>();
    private ArrayList<Token> TokensErrores = new ArrayList<>();
    private ArrayList<Token> TokensErroresLexer = new ArrayList<>();

    private TablaDeErrores tablaError = new TablaDeErrores();


        public ArrayList<String> getErrores() {
        return errores;
    }
    public int getCantidadErrores(){
        int cantError= TokensErrores.size();
        return cantError;
    }

    public String getWorld(){
        return xml; 
    }
   /* public void syntax_error(Symbol s) {
            tabla.agregarError(String.valueOf(s.value), s.left, s.right, "Sintactico", "Error de Sintaxis, se esperaba otro token");
        }*/

        public void syntax_error (Symbol s) {
        Token tokenError = (Token) s.value; 
        System.out.println("Error token Lexema: " + String.valueOf(s.value.toString()) + " | Linea: " + s.left + " | columna: " + s.right);
        System.out.println("Error token Lexema: " + tokenError.getValue() + " | Linea: " + tokenError.getLine() + " | columna: " + tokenError.getColumna());
        errores.add("Error Sintactico: Lexema: " +  tokenError.getValue() + " | Linea: " +  tokenError.getLine() + " | columna: " +  tokenError.getColumna());
        TokensErrores.add(tokenError);
    }


    /*public Symbol scan() throws Exception {
        Symbol sym = this.getScanner().next_token();
        if (sym == null) {
            return this.getSymbolFactory().newSymbol("END_OF_FILE", this.EOF_sym());
        }

        while(sym != null && sym.sym == ParserSym.SYM) {
            this.report_expected_token_ids();
            System.out.println("Ingorando: " + sym.value.toString());
            sym = this.getScanner().next_token();
        }

        if (sym == null) {
            return this.getSymbolFactory().newSymbol("END_OF_FILE", this.EOF_sym());
        }

        return sym;
    }
*/
  


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= s EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // s ::= LLAVE_ABRE s2 LLAVE_CIERRA 
            {
              Object RESULT =null;
		
                                                                if(boxes.size()!=targets.size()){
                                                                        System.out.println("Error cajas y targes deben ser la misma cantidad");
                                                                        
                                                                }
                                                                if(TokensErrores.size()>0){
                                                                        for(String error: errores){
                                                                                System.out.println(error);
                                                                        }
                                                                        xml=tablaError.mostrarErrores(TokensErrores);
                                                                        }else{
                                                                        System.out.println("\nSe creo un mundo con exito");
                                                                        world = new World(nameWorld, filas, columnas, boards,boxes, targets,player );
                                                                       // world.escribirJuego();
                                                                        xml=world.convertirXML();
                                                                        }  
                                                                
                                                                

                                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // s ::= error LLAVE_CIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // s2 ::= s2 COMA atributes 
            {
              Object RESULT =null;
		       
                                        System.out.println("varios atri");
                                        //CREAAMOS UN METODO que verifique que no haya cajas atributos repetidos
                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s2",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // s2 ::= atributes 
            {
              Object RESULT =null;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s2",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // s2 ::= s2 error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s2",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // atributes ::= NAME DOS_PUNTOS STRING 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token n = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                                                System.out.println("se definio un nombre1"+n.getValue()); nameWorld=n.getValue(); nameWorld=nameWorld.substring(1,nameWorld.length()-1); RESULT=nameWorld;
                                                                if(nameWorld != null){
                                                                        System.out.println("Error ya ha sido definido un nombre, no pude venir este artributo dos veces");
                                                                } 
                                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atributes",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // atributes ::= ROWS DOS_PUNTOS expr 
            {
              Object RESULT =null;
		int rowsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rowsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer rows = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                                                System.out.println("se definio un row"); filas=rows; RESULT=rows; 
                                                                if(filas != 0){
                                                                        System.out.println("Error ya ha sido definido un rows, no pude venir este artributo dos veces");
                                                                } 
                                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atributes",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // atributes ::= COLS DOS_PUNTOS expr 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer n1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                                                System.out.println("se definio un columnas "); columnas=n1; RESULT=n1;
                                                                if(columnas != 0){
                                                                        System.out.println("Error ya ha sido definido un cols, no pude venir este artributo dos veces");
                                                                }
                                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atributes",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // atributes ::= CONFIG DOS_PUNTOS config 
            {
              Object RESULT =null;
		
                                                                        System.out.println("se configuro ");
                                                                        
                                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atributes",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // atributes ::= BOARD DOS_PUNTOS COR_ABRE board COR_CIERRA 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Casilla> lista = (ArrayList<Casilla>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                                                                        System.out.println("<board>"+"</board> ");
                                                                        boards = lista;
                                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atributes",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // atributes ::= opc_pos DOS_PUNTOS COR_ABRE s3 COR_CIERRA 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Posicion> lista = (ArrayList<Posicion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                                                                        System.out.println("posiones \n");
                                                                        for (int i=0;i<lista.size();i++) {
                                                                                if (o =="boxes"){
                                                                                        Casilla casila = new Casilla(lista.get(i).getPosX(),lista.get(i).getPosY(), "boxes");
                                                                                        boxes.add(casila);
                                                                                        System.out.println("Ingresamos boxes");
                                                                                }else if(o=="targets"){
                                                                                        Casilla casila = new Casilla(lista.get(i).getPosX(),lista.get(i).getPosY(), "targets");
                                                                                        targets.add(casila);
                                                                                        System.out.println("Ingresamos targests");
                                                                                }
                                                                        }
                                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atributes",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // atributes ::= PLAYER DOS_PUNTOS LLAVE_ABRE box LLAVE_CIERRA 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Posicion p = (Posicion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                                                                        
                                                                        player=new Casilla(p.getPosX(), p.getPosY(), "player");
                                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atributes",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // atributes ::= error COR_CIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("atributes",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // atributes ::= error LLAVE_CIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("atributes",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // config ::= LLAVE_ABRE settings LLAVE_CIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("config",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // settings ::= settings COMA propierties DOS_PUNTOS HEXADECIMAL 
            {
              Object RESULT =null;
		int arregloleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int arregloright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object arreglo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		
                                                                                /*if(p != null){
                                                                                        arreglo.add(p);
                                                                                }
                                                                                RESULT=arreglo;*/
                                                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("settings",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // settings ::= propierties DOS_PUNTOS HEXADECIMAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("settings",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // propierties ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("propierties",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // propierties ::= BOX_COLOR 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=p;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("propierties",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // propierties ::= BOX_ON_TARGET_COLOR 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=p;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("propierties",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // propierties ::= TARGET_COLOR 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=p;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("propierties",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // propierties ::= BRICK_COLOR 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=p;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("propierties",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // propierties ::= HALL_COLOR 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=p;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("propierties",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // propierties ::= UNDEFINED_COLOR 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=p;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("propierties",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // propierties ::= PLAYER_COLOR 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=p;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("propierties",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // board ::= board COMA LLAVE_ABRE sub LLAVE_CIERRA 
            {
              ArrayList<Casilla> RESULT =null;
		int arregloleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int arregloright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ArrayList<Casilla> arreglo = (ArrayList<Casilla>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Casilla s = (Casilla)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                                                                        if(s != null){
                                                                                arreglo.add(s);
                                                                        }
                                                                        RESULT=arreglo;
                                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("board",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // board ::= LLAVE_ABRE sub LLAVE_CIERRA 
            {
              ArrayList<Casilla> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Casilla s = (Casilla)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                                                                        RESULT=new ArrayList<Casilla>();
                                                                        if(s != null){
                                                                                RESULT.add(s);
                                                                        }
                                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("board",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // board ::= error LLAVE_CIERRA 
            {
              ArrayList<Casilla> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("board",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // sub ::= box COMA typeC 
            {
              Casilla RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Posicion p = (Posicion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		      RESULT= new Casilla(p.getPosX(), p.getPosY(), t);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sub",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // sub ::= typeC COMA box 
            {
              Casilla RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Posicion p = (Posicion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                                        RESULT= new Casilla(p.getPosX(), p.getPosY(), t);

                                               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sub",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // sub ::= error typeC 
            {
              Casilla RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sub",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // sub ::= error box 
            {
              Casilla RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sub",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // typeC ::= TYPE DOS_PUNTOS opcBoard 
            {
              String RESULT =null;
		int opcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opcright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String opc = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=opc; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("typeC",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // opcBoard ::= BRICK 
            {
              String RESULT =null;
		RESULT="BRICK";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opcBoard",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // opcBoard ::= HALL 
            {
              String RESULT =null;
		RESULT="HALL";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opcBoard",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // opc_pos ::= BOXES 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token b = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT="boxes";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opc_pos",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // opc_pos ::= TARGETS 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT="targets";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opc_pos",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // s3 ::= s3 COMA LLAVE_ABRE box LLAVE_CIERRA 
            {
              ArrayList<Posicion> RESULT =null;
		int arrayPosleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int arrayPosright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ArrayList<Posicion> arrayPos = (ArrayList<Posicion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int xysleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int xysright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Posicion xys = (Posicion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                                                                        if(xys != null){
                                                                                arrayPos.add(xys);
                                                                        }
                                                                        RESULT=arrayPos;
                                                                     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s3",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // s3 ::= LLAVE_ABRE box LLAVE_CIERRA 
            {
              ArrayList<Posicion> RESULT =null;
		int xysleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int xysright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Posicion xys = (Posicion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                                                                System.out.println("Creamos una caja"); 
                                                                RESULT=new ArrayList<Posicion>();
                                                                if(xys != null){
                                                                        RESULT.add(xys);
                                                                }
                                                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s3",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // box ::= POSX DOS_PUNTOS expr COMA POSY DOS_PUNTOS expr 
            {
              Posicion RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Integer x = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer y = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.println("<posX> "+x+"<posX>"+"\n <posY>"+y+"</posY>");
                                                                RESULT= new Posicion(x, y);
                                                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("box",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // box ::= POSY DOS_PUNTOS expr COMA POSX DOS_PUNTOS expr 
            {
              Posicion RESULT =null;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Integer y = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer x = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.println("<posY> "+y+"<posY>"+"\n <posX>"+x+"</posX>"); RESULT= new Posicion(x, y);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("box",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expr ::= COMILLAS expr1 COMILLAS 
            {
              Integer RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		System.out.println(n); RESULT=n;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expr ::= expr4 
            {
              Integer RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=n;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expr1 ::= expr1 PLUS expr2 
            {
              Integer RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer n1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer n2 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n1 + n2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr1",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expr1 ::= expr1 MINUS expr2 
            {
              Integer RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer n1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer n2 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n1 - n2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr1",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expr1 ::= expr2 
            {
              Integer RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer n1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr1",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expr2 ::= expr2 TIMES expr3 
            {
              Integer RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer n1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer n2 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n1 * n2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr2",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expr2 ::= expr2 DIVIDE expr3 
            {
              Integer RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer n1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer n2 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n1 / n2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr2",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expr2 ::= expr3 
            {
              Integer RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer n1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr2",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expr3 ::= MINUS expr4 
            {
              Integer RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer n1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = -1 * n1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr3",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expr3 ::= expr4 
            {
              Integer RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer n1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr3",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expr4 ::= INTEGER 
            {
              Integer RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token n1 = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Integer.valueOf(n1.getValue()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr4",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expr4 ::= LPAREN expr1 RPAREN 
            {
              Integer RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer n1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = n1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr4",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expr4 ::= FLOOR LPAREN DECIMAL RPAREN 
            {
              Integer RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token n1 = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=(int) Math.floor(Double.parseDouble(n1.getValue())); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr4",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expr4 ::= CEIL LPAREN DECIMAL RPAREN 
            {
              Integer RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token n1 = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=(int) Math.ceil(Double.parseDouble(n1.getValue()));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr4",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
